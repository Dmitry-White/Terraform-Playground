name: Branch Pipeline

on:
  pull_request:
    branches:
      - main

env:
  TF_IN_AUTOMATION: "True"

jobs:
  format:
    name: Format Code
    runs-on: ubuntu-latest
    outputs:
      outcome: ${{ steps.fmt.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        id: fmt
        run: terraform fmt --check --recursive

  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    needs: format
    outputs:
      outcome: ${{ steps.validate.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="bucket=${{ vars.BACKEND_BUCKET }}" \
            -backend-config="key=${{ vars.BACKEND_KEY }}" \
            -backend-config="dynamodb_table=${{ vars.BACKEND_TABLE }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      outcome: ${{ steps.tflint.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="bucket=${{ vars.BACKEND_BUCKET }}" \
            -backend-config="key=${{ vars.BACKEND_KEY }}" \
            -backend-config="dynamodb_table=${{ vars.BACKEND_TABLE }}"

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        id: tflint
        run: tflint -f compact --force

  checkov:
    name: Checkov Code
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      outcome: ${{ steps.checkov.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          soft_fail: true

  security:
    name: Secure Code
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      outcome: ${{ steps.tfsec.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.0
        id: tfsec
        with:
          soft_fail: true

  plan:
    name: Plan Code
    runs-on: ubuntu-latest
    needs: [format, validate, lint, checkov, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="bucket=${{ vars.BACKEND_BUCKET }}" \
            -backend-config="key=${{ vars.BACKEND_KEY }}" \
            -backend-config="dynamodb_table=${{ vars.BACKEND_TABLE }}"

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        run: |
          terraform plan -no-color -input=false

      - name: Update Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Format üñåÔ∏è\`${{ needs.format.outputs.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ needs.validate.outputs.outcome }}\`
            #### Terraform Lint üëÅÔ∏è\`${{ needs.lint.outputs.outcome }}\`
            #### Terraform Checkov ‚úÖ\`${{ needs.checkov.outputs.outcome }}\`
            #### Terraform Security üõ°Ô∏è\`${{ needs.security.outputs.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
