# Initialize Terraform and all the Modules
terraform init

# Format your TF code
# Formatting is able to find style and simple syntax errors
# Just like Prettier for JS
terraform fmt

# Fix the name tag with the following code
Name = "{var.name}-justice-{each.key}"

# Validate your TF code
# Validation is able to find logical errors
# Just like ESLint for JS
terraform validate

# Since cycle error is caused by cross-reference in the rules of both SGs
# Move each of the rules to a separate resource block.
# Fix the cycle error with the following code:
resource "aws_security_group_rule" "allow_ping" {
    type = "ingress"
    from_port = -1
    to_port = -1
    protocol = "icmp"
    security_group_id = aws_security_group.sg_ping.id
    source_security_group_id = aws_security_group.sg_8080.id
}

resource "aws_security_group_rule" "allow_8080" {
    type = "ingress"
    from_port = 80
    to_port = 80
    protocol = "tcp"
    security_group_id = aws_security_group.sg_8080.id
    source_security_group_id = aws_security_group.sg_ping.id
}

# Since the TF code creates severla instances
# outputs should loop through each instance to get each of the IDs
# Fix eahc of the output errors with the similar code:
value = [for instance in aws_instance.web_app: instance.id]

# Exercise Terraform Workflow
terraform plan
terraform apply --auto-approve
terraform destroy --auto-approve

vpc: vpc-0dc67197427cefadf
ami: ami-0fe472d8a85bc7b0e
subnet_id: subnet-0eae4c86b7453be7e

