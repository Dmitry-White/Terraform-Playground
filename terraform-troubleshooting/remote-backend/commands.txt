# Create an S3 bucket to store the TF state data
aws s3api create-bucket \
    --profile <AWS_PROFILE> \
    --bucket <BUCKET_NAME>

aws s3api put-bucket-versioning \
    --profile <AWS_PROFILE> \
    --bucket <BUCKET_NAME> \
    --versioning-configuration Status=Enabled

# Terraform will need the following AWS IAM permissions on the target backend bucket:
    s3:ListBucket on arn:aws:s3:::mybucket
    s3:GetObject on arn:aws:s3:::mybucket/path/to/my/key
    s3:PutObject on arn:aws:s3:::mybucket/path/to/my/key
    s3:DeleteObject on arn:aws:s3:::mybucket/path/to/my/key

# Create a DynamoDB table to store TF state locking data.
# The table must have a partition key named LockID with type of String.
aws dynamodb create-table \
    --profile <AWS_PROFILE> \
    --table-name <TABLE_NAME> \
    --attribute-definitions AttributeName=LockID,AttributeType=S \
    --key-schema AttributeName=LockID,KeyType=HASH \

# Note: S3 Bucket and DynamoDB Table need to be in the same region.

# Add AWS credentials reference
export AWS_PROFILE=<YOUR_PROFILE_NAME>

# Alternatively, reconfigure an existing S3 bucket

# Initialize Terraform for the current directory for a new S3 bucket
# Alternatively, reconfigure an existing S3 bucket
terraform init
OR
terraform init -reconfigure

# Validation your TF syntax
terraform validate

# Exercise Terraform Workflow
terraform plan
terraform apply --auto-approve

# Destroy all TF resources
terraform destroy --auto-approve
